on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  release:
    name: release ${{ matrix.target }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            archive: zip
    steps:
      - uses: actions/checkout@master
      - name: Compile and release
        id: compile
        uses: rust-build/rust-build.action@v1.4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          RUSTTARGET: ${{ matrix.target }}
          UPLOAD_MODE: none
          
      - name: get version
        id: versions
        run: echo "::set-output name=ver::$(cat Cargo.toml | grep version | sed -n '1p' | cut -d '=' -f 2 | sed 's/\"//g' | sed 's/ //g')"
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ver_${{ steps.versions.outputs.ver }}
          release_name: Release ${{ steps.versions.outputs.ver }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ steps.compile.outputs.BUILT_ARCHIVE }}
          asset_name: ${{ matrix.target }}-cron_trigger.zip
          asset_content_type: application/zip
    
  
